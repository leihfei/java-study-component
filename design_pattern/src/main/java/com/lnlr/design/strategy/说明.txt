策略模式：
    策略模式定义了算法族，分别封装起来，让他们之间可以相互调用，
    此模式让算法的变化独立于使用算法的客户。

代码解释：
    定义了飞行的行为，叫声的行为接口。
    分别使用不能能力的行为实现该接口，那么就拥有了该接口的能力。

    定义鸭子的父类，每一种鸭子都将继承该鸭子类，鸭子类中拥有飞行，叫声的接口。
    那么现在需要让每种鸭子手动的设置行为的接口实现，那么鸭子就拥有了什么行为。


OO基础：
    抽象，封装，多台，继承。

oo原则:
    封装变化，多用组合、少用继承，针对接口编程，不针对实现编程。


要点：
    知道oo基础，并不足以让你设计出良好的oo系统，

    良好的oo设计必须具备可复用、可扩充、可维护三个特性。

    模式让我们建造出良好的oo设计质量的系统

    模式被认为是经历经验的oo设计经验。

    模式不是代码，而是针对设计问题的通用解决方案，你可以把他们应用到特定的应用中。

    模式不是被发明，而是被发现。

    大多数的模式和原则，都着眼于软件变化的主题。

    大多数的模式都允许系统局部改变独立于其他部分。

    我们常把系统中会变化的部分抽离出来封装。

    模式让开发人员之间共享的语言，能够最大化沟通的价值。