装饰者模式；
    动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。

说明：
    在装饰中者，其实就是不同的类都必须继承同一个父类或者实现同一个接口，那么在运行时动态加载
    数据，层层包装，就会构成装饰者模式，最典型的就是java.io包下的InputStream等。

再次说明：
    装饰者模式就是集成或者实现同一个类，然后在装饰的同时把父类(装饰者/被装饰者)传递过去，在当前
    该装饰者中使用super来获取到父类的数据，在加上/减去当前类的操作或者直接替换到父类的操作。从而
    得到新的类数据。



要点：
    继承属于扩展形式之一，单不见得是达到弹性设计的最佳方案

    在我们的设计中，应该允许行为可以被扩展，而无须修改现有代码

    组合和委托可用于在运行时动态地加上新的行为

    除了继承，装饰者模式也可以让我们扩展行为

    装饰者模式意味着一群装饰者类，这些类用于包装具体组件

    装饰者类反应出被装饰者的组件类型(事实上，他们具有相同的类型，都经过接口或继承实现)

    装饰者可以在被装饰者的行为前面或者后面加上自己的行为，甚至将被装饰着的行为整个取代，而达到特定的目的

    你可以用无所个装饰者包装一个组件

    装饰者一般对组件的客户是透明的，除非客户程序依赖组件的具体类型

    装饰者会导致设计中出现许多小对象，如果过度使用，会让程序变得很复杂